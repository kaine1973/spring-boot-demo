<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="rk.dao.OrderDao">
    <resultMap id="orderDetail" type="rk.po.Order">
        <id column="id" property="id"/>
        <result column="order_number" property="orderNumber"/>
        <result column="receiver_address_id" property="receiverAddressId"/>
        <result column="sender_address_id" property="senderAddressId"/>
        <result column="customer_id" property="customerId"/>
        <result column="create_date" property="createDate"/>
        <result column="is_valid" property="isValid"/>
        <result column="user_id" property="userId"/>
        <result column="uname" property="userName"/>
        <association property="customer" javaType="rk.po.Customer">
            <id column="customer_id" property="id"/>
            <result column="customer_name" property="customerName"/>
            <result column="customer_company" property="company"/>
        </association>
        <association property="senderAddress" javaType="rk.po.common.Address">
            <id column="sender_address_id" property="id"/>
            <result column="sender_address_company" property="company"/>
            <result column="sender_address_name" property="name"/>
        </association>
        <association property="receiverAddress" javaType="rk.po.common.Address">
            <id column="receiver_address_id" property="id"/>
            <result column="receiver_address_company" property="company"/>
            <result column="receiver_address_name" property="name"/>
        </association>
        <collection column="id"
                    property="stockOperations"
                    ofType="rk.po.StockOperation"
                    select="queryStockOperationsOfOrder"/>
    </resultMap>

    <select id="queryStockOperationsOfOrder" resultMap="rk.dao.StockDao.stockOperationMap">
        select  st.id as id,
                st.product_id as product_id,
                p.product_name as product_name,
                p.product_unit as product_unit,
                p.product_serial as product_serial,
                p.brand as product_brand,
                UPPER(st.operation) as operation,
                sp.specification_name as specification_name,
                st.amount as amount,
                sp.price as price,
                sp.price as price,
                st.deal_price as deal_price,
                st.confirm_date as confirm_date,
                st.add_date as add_date,
                st.confirmed as confirmed
        from (select * from ticket_operations where order_id = #{id}) as ticket
        join stock_operation st on ticket.operation_id = st.id
        join product_specification as sp on sp.id = st.specification_id
        join product as p on p.id = st.product_id
    </select>

    <select id="queryByOrderNumber" resultMap="orderDetail">
        select * from out_stock_ticket where order_number = #{orderNumber}
    </select>

    <select id="queryOrderOperations" resultMap="rk.dao.StockDao.stockOperationMap">
        select * from stock_operation where id in
                (select operation_id from ticket_operations where order_id = #{orderId})
        and user_id = #{userId}
    </select>

    <select id="queryById" resultMap="orderDetail">
        select ticket.*,
               customer.id as customer_id,
               customer.customer_name as customer_name,
               customer.company as customer_company
        from (select * from out_stock_ticket where id=#{id}) as ticket
            join customer on ticket.customer_id = customer.id
            join address receiver_address on receiver_address.id = ticket.receiver_address_id
            join address sender_address on sender_address.id = ticket.sender_address_id
    </select>

    <select id="queryByParams" resultMap="orderDetail" parameterType="rk.query.OrderQuery">
        select ticket.*,u.uname,
               customer.id as customer_id,
               customer.customer_name as customer_name,
               customer.company as customer_company,
               sender_address.company as sender_address_company,
               sender_address.name as sender_address_name,
               receiver_address.company as receiver_address_company,
               receiver_address.name as receiver_address_name
        from (select distinct ost.*
                from out_stock_ticket ost
                left join ticket_operations t_o on t_o.order_id = ost.id
                left join stock_operation so on t_o.operation_id = so.id
                left join product on product.id = so.product_id
                where 1=1
                  <trim>
                      <if test="userId != null and userId != ''">
                          and ost.user_id = #{userId}
                      </if>
                      <if test="orderNumber != null and orderNumber != ''">
                          and ost.order_number = #{orderNumber}
                      </if>
                      <if test="dateFrom != null and dateTo != null">
                          and ost.create_date between #{dateFrom} and #{dateTo}
                      </if>
                      <if test="productName != null and productName != ''">
                          and product.product_name like concat('%',#{productName},'%')
                      </if>
                  </trim>
            ) as ticket
        left join customer on ticket.customer_id = customer.id
        left join address receiver_address on receiver_address.id = ticket.receiver_address_id
        left join address sender_address on sender_address.id = ticket.sender_address_id
        left join user u on ticket.user_id = u.id
        order by ticket.create_date desc
    </select>

    <insert id="save" parameterType="rk.po.Order" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        insert into out_stock_ticket
            (receiver_address_id, sender_address_id, user_id, customer_id, order_number)
            values(#{receiverAddressId},
                   #{senderAddressId},
                   #{userId},
                   #{customerId},
                   #{orderNumber})
    </insert>



    <insert id="saveOrderOperations" parameterType="java.util.List">
        insert into crm.ticket_operations(order_id, operation_id)
        values
        <foreach collection="list" item="item" separator=",">
            (#{item.orderId},#{item.operationId})
        </foreach>
    </insert>
</mapper>