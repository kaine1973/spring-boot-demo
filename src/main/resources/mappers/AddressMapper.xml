<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="rk.dao.AddressDao">

    <resultMap id="address" type="rk.po.common.Address">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="province" property="province" jdbcType="VARCHAR"/>
        <result column="province_id" property="provinceId" jdbcType="INTEGER"/>
        <result column="city" property="city" jdbcType="VARCHAR"/>
        <result column="city_id" property="cityId" jdbcType="INTEGER"/>
        <result column="district" property="district" jdbcType="VARCHAR"/>
        <result column="district_id" property="districtId" jdbcType="INTEGER"/>
        <result column="detail" property="detail" jdbcType="VARCHAR"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="company" property="company" jdbcType="VARCHAR"/>
        <result column="phone" property="phone" jdbcType="VARCHAR"/>
        <result column="of_user" property="ofUser" jdbcType="TINYINT"/>
        <result column="customer_id" property="customerId" jdbcType="INTEGER"/>
        <result column="primary" property="primary"/>
        <result column="is_valid" property="isValid"/>
    </resultMap>

    <select id="queryByIdAndUserId" resultMap="address" parameterType="java.lang.Integer">
        select d.province,d.province_id,d.city,d.city_id,d.district,d.district_id,a.`primary`,a.detail,a.id,a.name,a.phone,a.company,a.customer_id
        from crm.address as a join
             (SELECT p.area_name as province,p.id as province_id,c.area_name as city,c.id as city_id,d.area_name as district,d.id as district_id
              FROM crm.area as d join crm.area as c on d.parentid = c.id
                                 join crm.area as p on p.id = c.parentid where d.level=3)
                 as d on a.district_id = d.district_id
        where a.user_id = #{userId} and a.id = #{id} and a.is_valid = 1;
    </select>

    <select id="queryById" resultMap="address" parameterType="java.lang.Integer">
        select d.province,d.province_id,d.city,d.city_id,d.district,d.district_id,a.`primary`,a.detail,a.id,a.name,a.phone,a.company,a.customer_id
        from crm.address as a join
             (SELECT p.area_name as province,p.id as province_id,c.area_name as city,c.id as city_id,d.area_name as district,d.id as district_id
              FROM crm.area as d join crm.area as c on d.parentid = c.id
                                 join crm.area as p on p.id = c.parentid where d.level=3)
                 as d on a.district_id = d.district_id
        where a.id = #{id} and a.is_valid = 1;
    </select>
    <select id="queryByParams" resultMap="address" parameterType="rk.query.AddressQuery">
        select d.province,d.city,d.district,d.district_id,d.province_id,d.city_id,a.detail,a.id,a.name,a.phone,a.company,a.`primary`
        from crm.address as a join
             (SELECT p.area_name as province,p.id as province_id,c.area_name as city,c.id as city_id,d.area_name as district,d.id as district_id
              FROM crm.area as d join crm.area as c on d.parentid = c.id
                                 join crm.area as p on p.id = c.parentid where d.level=3)
                 as d on a.district_id = d.district_id
        where a.user_id = #{userId} and a.of_user = #{ofUser} and is_valid = 1
    </select>

    <select id="queryByCustomerIdAndUserId" resultMap="address" parameterType="java.lang.Integer">
        select d.province,d.city,d.district,d.district_id,d.province_id,d.city_id,a.detail,a.id,a.name,a.phone,a.company,a.`primary`
        from crm.address as a join
             (SELECT p.area_name as province,p.id as province_id,c.area_name as city,c.id as city_id,d.area_name as district,d.id as district_id
              FROM crm.area as d join crm.area as c on d.parentid = c.id
                                 join crm.area as p on p.id = c.parentid where d.level=3)
                 as d on a.district_id = d.district_id
        where a.customer_id = #{customerId} and a.of_user = 0 and is_valid = 1;
    </select>

    <insert id="saveBatch" parameterType="rk.po.common.Address">
        insert into crm.address(user_id,customer_id,crm.address.company,crm.address.name,phone,crm.address.district_id,crm.address.detail,of_user,`primary`)
        VALUES
        <foreach collection="list" item="address" separator=",">
            (#{address.userId},
            #{address.customerId},
            #{address.company},
            #{address.name},
            #{address.phone},
            #{address.districtId},
            #{address.detail},
             #{address.ofUser},
             #{address.primary})
        </foreach>
    </insert>

    <insert id="save" parameterType="rk.po.common.Address">
        insert into crm.address(user_id,customer_id,company,name,phone,district_id,detail,of_user,`primary`)
        VALUES (#{userId},
            #{customerId},
            #{company},
            #{name},
            #{phone},
            #{districtId},
            #{detail},
            #{ofUser},
            #{primary})
    </insert>

    <update id="update" parameterType="rk.po.common.Address">
        update crm.address
        <set>
            <if test="name != null and name != '' ">
                name = #{name},
            </if>
            <if test="districtId != null and districtId != '' ">
                district_id = #{districtId},
            </if>
            <if test="detail != null and detail != '' ">
                detail = #{detail},
            </if>
            <if test="phone != null and phone != '' ">
                phone = #{phone},
            </if>
            <if test="company != null and company != '' ">
                company = #{company},
            </if>
            <if test="primary != null and primary != '' ">
                `primary` = #{primary},
            </if>
            <if test="isValid != null ">
                is_valid = #{isValid},
            </if>
        </set>
            where id = #{id}
    </update>

</mapper>